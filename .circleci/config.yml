version: 2.1

jobs:
  node-prepare:
    working_directory: ~/project
    docker:
      - image: cimg/node:18.10.0

    steps:
      - checkout:
          path: ~/project

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn run test
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  ios_build:
    macos:
      xcode: '13.1.0'
    working_directory: ~/project/ios
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: ~/project
      - run: gem install bundler
      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run: bundle install
      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle
      - run:
          name: fastlane
          command: bundle exec fastlane $FASTLANE_LANE
      - store_artifacts:
          path: output
      - store_test_results:
          path: output/scan
      - run: bundle exec danger --verbose

  android-build:
    working_directory: ~/project/android
    docker:
      - image: circleci/android:api-29-node
    parameters:
      app_env:
        type: string
        default: dev

    steps:
      - checkout:
          path: ~/project

      - attach_workspace:
          at: ~/project

      - run: gem install bundler

      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}

      - run: bundle install

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: set git configs
          command: |
            GIT_EMAIL="hossamnasser938@gmail.com"
            GIT_NAME="Hossam"
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME

      - run:
          name: fastlane tests
          command: |
            mkdir -p test-results/fastlane
            bundle exec fastlane test
            mv fastlane/report.xml test-results/fastlane
      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

      - run:
          name: build android and deploy to app distribution
          command: |
            bundle exec fastlane env_build_and_deliver env:<< parameters.app_env >>
      - store_artifacts:
          path: app/build/outputs/apk/release

workflows:
  node-prepare-w:
    jobs:
      - node-prepare
      - ios_build

  android-build-dev:
    jobs:
      - node-prepare:
          filters:
            tags:
              only: /^BUILD_DEV.*/
            branches:
              ignore: /.*/
      - android-build:
          app_env: dev
          requires:
            - node-prepare
          filters:
            tags:
              only: /^BUILD_DEV.*/
            branches:
              ignore: /.*/

  android-build-stag:
    jobs:
      - node-prepare:
          filters:
            tags:
              only: /^BUILD_STAG.*/
            branches:
              ignore: /.*/
      - android-build:
          app_env: stag
          requires:
            - node-prepare
          filters:
            tags:
              only: /^BUILD_STAG.*/
            branches:
              ignore: /.*/

  android-build-prod:
    jobs:
      - node-prepare:
          filters:
            tags:
              only: /^BUILD_PROD.*/
            branches:
              ignore: /.*/
      - android-build:
          app_env: prod
          requires:
            - node-prepare
          filters:
            tags:
              only: /^BUILD_PROD.*/
            branches:
              ignore: /.*/
# VS Code Extension Version: 1.4.0
